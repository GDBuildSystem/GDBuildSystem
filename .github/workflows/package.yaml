name: Package GDBuildSystem

on:
    push:
        branches:
            - main
    workflow_dispatch:

permissions:
  contents: write # Needed for the release process

jobs:
  semantic-versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies
        run: |
          npm init -y
          npm install --save-dev semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/changelog @semantic-release/github @semantic-release/git
          npm install

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
  package:
    runs-on: ubuntu-latest
    needs: 
      - semantic-versioning

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Finding Release
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            if (releases.data.length === 0) {
              throw new Error('No releases found');
            }
            return releases.data[0]; // latest release
          result-encoding: string

      - name: Create addons folder and move GDBuildSystem
        run: |
            VERSION=$(echo "${{ fromJson(steps.get_release.outputs.result).tag_name }}" | sed 's/v//')
            echo "VERSION: $VERSION"
            mkdir addons
            mv gdbuildsystem addons/

      - name: Zip the addons folder
        run: |
            zip -r gdbuildsystem-$VERSION.zip addons

      - name: Upload the zip file as an artifact
        uses: actions/upload-artifact@v4
        with:
            name: addons-zip
            path: gdbuildsystem-$VERSION.zip
            retention-days: 1
    
      - name: Upload asset with gh CLI
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ fromJson(steps.get_release.outputs.result).tag_name }} gdbuildsystem-$VERSION.zip --clobber
          